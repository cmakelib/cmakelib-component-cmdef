## Main
#
# Test architecture detection in CMDEF_ENV
#

IF(NOT DEFINED CMAKE_SCRIPT_MODE_FILE)
	CMAKE_MINIMUM_REQUIRED(VERSION 3.22)
	PROJECT(CMDEF_ENV_ARCH_DETECTION_TEST)
ENDIF()

FIND_PACKAGE(CMLIB REQUIRED)

INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../TEST.cmake")
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../../system_modules/CMDEF_ENV.cmake")

IF(CMDEF_OS_LINUX)
	LIST(FIND _CMDEF_ENV_SUPPORTED_ARCH_LIST "${CMDEF_ARCHITECTURE}" arch_found)
	IF(arch_found EQUAL -1)
		MESSAGE(FATAL_ERROR "Unsupported architecture detected: ${CMDEF_ARCHITECTURE}")
	ENDIF()
ELSEIF(CMDEF_OS_WINDOWS)
	TEST_VAR_VALUE_EQUAL(CMDEF_ARCHITECTURE "x86-64")
ELSEIF(CMDEF_OS_MACOS)
	TEST_VAR_VALUE_EQUAL(CMDEF_ARCHITECTURE "aplsil")
ELSE()
	MESSAGE(FATAL_ERROR "No OS flag is set to true")
ENDIF()

TEST_VAR_DEFINED(CMDEF_DISTRO_ID)
TEST_VAR_DEFINED(CMDEF_DISTRO_VERSION_ID)

IF(CMDEF_OS_LINUX)
	IF("${CMDEF_DISTRO_ID}" STREQUAL "")
		MESSAGE(FATAL_ERROR "CMDEF_DISTRO_ID should not be empty on Linux")
	ENDIF()
	IF("${CMDEF_DISTRO_VERSION_ID}" STREQUAL "")
		MESSAGE(FATAL_ERROR "CMDEF_DISTRO_VERSION_ID should not be empty on Linux")
	ENDIF()
ELSEIF(CMDEF_OS_WINDOWS)
	TEST_VAR_VALUE_EQUAL(CMDEF_DISTRO_ID "windows")
	TEST_VAR_VALUE_EQUAL(CMDEF_DISTRO_VERSION_ID "1")
ELSEIF(CMDEF_OS_MACOS)
	TEST_VAR_VALUE_EQUAL(CMDEF_DISTRO_ID "macos")
	TEST_VAR_VALUE_EQUAL(CMDEF_DISTRO_VERSION_ID "11")
ENDIF() 