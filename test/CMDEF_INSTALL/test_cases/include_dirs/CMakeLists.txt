## Main
#
# Test CMDEF_INSTALL with include directories
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.18)
PROJECT(CMDEF_INSTALL_INCLUDE_DIRS_TEST)

FIND_PACKAGE(CMLIB REQUIRED)

INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../../TEST.cmake")
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../../../CMDEFConfig.cmake")
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../../install_override.cmake")
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../shared_sources/shared_sources.cmake")
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../../install_test_macros.cmake")

##
# Test installation with include directories.
#
# Creates a library with INSTALL_INCLUDE_DIRECTORIES and verifies
# INSTALL(DIRECTORY) is called with correct destination.
#
# <function>()
#
FUNCTION(TEST_INCLUDE_DIRECTORIES_INSTALL)
    TEST_CLEAR_INSTALL_CALLS()
    
    CMDEF_ADD_LIBRARY(
        LIBRARY_GROUP dlib
        TYPE SHARED
        VERSION 1.0.0
        SOURCES "${LIBRARY_SOURCE_FILE}"
        INCLUDE_DIRECTORIES "${LIBRARY_INCLUDE_DIR}"
        INSTALL_INCLUDE_DIRECTORIES "${LIBRARY_INCLUDE_DIR}"
    )
    
    CMDEF_INSTALL(TARGET dlib-shared)
    
    TEST_INSTALL_TARGETS_EXPORT_EQUALS("dlib-shared")
    TEST_INSTALL_TARGETS_DESTINATION_EQUALS("ARCHIVE" "${CMDEF_LIBRARY_INSTALL_DIR}")
    
    TEST_INSTALL_TARGETS_DESTINATION_EQUALS("PUBLIC_HEADER" "${CMDEF_INCLUDE_INSTALL_DIR}")
    
    TEST_INSTALL_DIRECTORY_DESTINATION_EQUALS("${CMDEF_INCLUDE_INSTALL_DIR}")
    
    TEST_INSTALL_EXPORT_DESTINATION_EQUALS("${CMDEF_LIBRARY_INSTALL_DIR}/cmake//")
ENDFUNCTION()

##
# Test include directories installation with property verification.
#
# Creates a library with INSTALL_INCLUDE_DIRECTORIES and verifies all target
# properties set by CMDEF_INSTALL are correctly configured, including
# INSTALL_INTERFACE generator expressions.
#
# <function>()
#
FUNCTION(TEST_INCLUDE_DIRECTORIES_PROPERTIES)
    TEST_CLEAR_INSTALL_CALLS()

    CMDEF_ADD_LIBRARY(
        LIBRARY_GROUP dplib
        TYPE SHARED
        VERSION 1.0.0
        SOURCES "${LIBRARY_SOURCE_FILE}"
        INCLUDE_DIRECTORIES "${LIBRARY_INCLUDE_DIR}"
        INSTALL_INCLUDE_DIRECTORIES "${LIBRARY_INCLUDE_DIR}"
    )

    CMDEF_INSTALL(TARGET dplib-shared)

    TEST_CHECK_TARGET_PROPERTY(dplib-shared CMDEF_INSTALL ON)
    TEST_CHECK_TARGET_INCLUDE_DIRECTORIES_CONTAINS(dplib-shared INTERFACE "$<INSTALL_INTERFACE:${CMDEF_INCLUDE_INSTALL_DIR}>")

    TEST_CHECK_TARGET_HAS_PROPERTY(dplib-shared CMDEF_INSTALL_INCLUDE_DIRECTORIES)

    GET_TARGET_PROPERTY(all_include_dirs dplib-shared INTERFACE_INCLUDE_DIRECTORIES)
    IF(NOT all_include_dirs MATCHES "BUILD_INTERFACE")
        MESSAGE(FATAL_ERROR "INTERFACE_INCLUDE_DIRECTORIES should contain BUILD_INTERFACE but does not. Got: ${all_include_dirs}")
    ENDIF()
    IF(NOT all_include_dirs MATCHES "INSTALL_INTERFACE")
        MESSAGE(FATAL_ERROR "INTERFACE_INCLUDE_DIRECTORIES should contain INSTALL_INTERFACE but does not. Got: ${all_include_dirs}")
    ENDIF()
ENDFUNCTION()

##
# Test include directories behavior without INSTALL_INCLUDE_DIRECTORIES.
#
# Creates a library with regular INCLUDE_DIRECTORIES but no INSTALL_INCLUDE_DIRECTORIES
# and verifies that INSTALL_INTERFACE is NOT added.
#
# <function>()
#
FUNCTION(TEST_INCLUDE_DIRECTORIES_NO_INSTALL)
    TEST_CLEAR_INSTALL_CALLS()

    CMDEF_ADD_LIBRARY(
        LIBRARY_GROUP dnilib
        TYPE SHARED
        VERSION 1.0.0
        SOURCES "${LIBRARY_SOURCE_FILE}"
        INCLUDE_DIRECTORIES "${LIBRARY_INCLUDE_DIR}"
    )

    CMDEF_INSTALL(TARGET dnilib-shared)

    TEST_CHECK_TARGET_PROPERTY(dnilib-shared CMDEF_INSTALL ON)
    TEST_CHECK_TARGET_LACKS_PROPERTY(dnilib-shared CMDEF_INSTALL_INCLUDE_DIRECTORIES)

    GET_TARGET_PROPERTY(include_dirs dnilib-shared INTERFACE_INCLUDE_DIRECTORIES)
    IF(include_dirs AND include_dirs MATCHES "INSTALL_INTERFACE")
        MESSAGE(FATAL_ERROR "INTERFACE_INCLUDE_DIRECTORIES should not contain INSTALL_INTERFACE when no INSTALL_INCLUDE_DIRECTORIES. Got: ${include_dirs}")
    ENDIF()
ENDFUNCTION()

TEST_INCLUDE_DIRECTORIES_INSTALL()
TEST_INCLUDE_DIRECTORIES_PROPERTIES()
TEST_INCLUDE_DIRECTORIES_NO_INSTALL()
