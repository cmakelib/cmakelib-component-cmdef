## Main
#
# CMDEF_PACKAGE specific test helper macros
#
# This module provides specialized test macros for verifying functionality
# specific to CMDEF_PACKAGE. These macros complement the INSTALL command verification
# functions in install_override.cmake by focusing on package file creation,
# custom target verification, and package-specific properties.
#

##
# Verify that package config file exists and contains expected content.
#
# Checks that CONFIGURE_PACKAGE_CONFIG_FILE created the expected config file
# in the build directory with the correct name pattern.
#
# <macro>(
#     <target_name>  // Target name used for package config file naming
# )
#
MACRO(TEST_PACKAGE_CONFIG_FILE_EXISTS target_name)
    SET(config_file "${CMAKE_CURRENT_BINARY_DIR}/${target_name}Config.cmake")
    IF(NOT EXISTS "${config_file}")
        MESSAGE(FATAL_ERROR "Package config file should exist: ${config_file}")
    ENDIF()
ENDMACRO()

##
# Verify that package version file exists and contains expected content.
#
# Checks that WRITE_BASIC_PACKAGE_VERSION_FILE created the expected version file
# in the build directory with the correct name pattern.
#
# <macro>(
#     <target_name>  // Target name used for package version file naming
# )
#
MACRO(TEST_PACKAGE_VERSION_FILE_EXISTS target_name)
    SET(version_file "${CMAKE_CURRENT_BINARY_DIR}/${target_name}ConfigVersion.cmake")
    IF(NOT EXISTS "${version_file}")
        MESSAGE(FATAL_ERROR "Package version file should exist: ${version_file}")
    ENDIF()
ENDMACRO()

##
# Verify that package config file contains expected content.
#
# Reads the config file and checks for specific content patterns
# that should be generated by CONFIGURE_PACKAGE_CONFIG_FILE.
#
# <macro>(
#     <target_name>     // Target name used for package config file naming
#     <expected_content> // Content pattern to search for in the file
# )
#
MACRO(TEST_PACKAGE_CONFIG_FILE_CONTAINS target_name expected_content)
    SET(config_file "${CMAKE_CURRENT_BINARY_DIR}/${target_name}Config.cmake")
    FILE(READ "${config_file}" file_content)
    STRING(FIND "${file_content}" "${expected_content}" found_pos)
    IF(found_pos EQUAL -1)
        MESSAGE(FATAL_ERROR "Package config file should contain '${expected_content}' but content is: ${file_content}")
    ENDIF()
ENDMACRO()

##
# Verify that package version file contains expected version.
#
# Reads the version file and checks that it contains the expected version number.
#
# <macro>(
#     <target_name>      // Target name used for package version file naming
#     <expected_version> // Version string that should be in the file
# )
#
MACRO(TEST_PACKAGE_VERSION_FILE_CONTAINS target_name expected_version)
    SET(version_file "${CMAKE_CURRENT_BINARY_DIR}/${target_name}ConfigVersion.cmake")
    FILE(READ "${version_file}" file_content)
    STRING(FIND "${file_content}" "${expected_version}" found_pos)
    IF(found_pos EQUAL -1)
        MESSAGE(FATAL_ERROR "Package version file should contain version '${expected_version}' but content is: ${file_content}")
    ENDIF()
ENDMACRO()

##
# Verify that PACKAGE custom target does not exist. Used in multiconf tests.
#
# Checks that ADD_CUSTOM_TARGET did not create the PACKAGE target for single-config builds.
# This target should not exist when CMAKE_BUILD_TYPE is set.
#
# <macro>()
#
MACRO(TEST_PACKAGE_CUSTOM_TARGET_NOT_EXISTS)
    IF(TARGET PACKAGE)
        MESSAGE(FATAL_ERROR "PACKAGE custom target should not exist for single-config builds")
    ENDIF()
ENDMACRO()

##
# Verify that CPACK_PACKAGE_VERSION is set correctly.
#
# Checks that CMDEF_PACKAGE set the CPACK_PACKAGE_VERSION variable
# to the expected version value.
#
# <macro>(
#     <expected_version>  // Expected version string
# )
#
MACRO(TEST_PACKAGE_CPACK_PACKAGE_VERSION expected_version)
    IF(NOT DEFINED CPACK_PACKAGE_VERSION)
        MESSAGE(FATAL_ERROR "CPACK_PACKAGE_VERSION should be set by CMDEF_PACKAGE")
    ENDIF()
    IF(NOT CPACK_PACKAGE_VERSION STREQUAL "${expected_version}")
        MESSAGE(FATAL_ERROR "CPACK_PACKAGE_VERSION should be '${expected_version}' but is '${CPACK_PACKAGE_VERSION}'")
    ENDIF()
ENDMACRO()

##
# Verify that CPACK_PACKAGE_FILE_NAME is set correctly for single-config builds.
#
# Checks that CMDEF_PACKAGE set the CPACK_PACKAGE_FILE_NAME variable
# with the expected pattern for single-config builds (CMAKE_BUILD_TYPE set).
#
# <macro>(
#     <target_name>       // Target name to check in the file name
#     <expected_version>  // Expected version string
# )
#
MACRO(TEST_PACKAGE_CPACK_PACKAGE_FILE_NAME target_name expected_version)
    IF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
        MESSAGE(FATAL_ERROR "CPACK_PACKAGE_FILE_NAME should be set by CMDEF_PACKAGE for single-config builds")
    ENDIF()

    STRING(FIND "${CPACK_PACKAGE_FILE_NAME}" "${target_name}" target_found)
    IF(target_found EQUAL -1)
        MESSAGE(FATAL_ERROR "CPACK_PACKAGE_FILE_NAME should contain target name '${target_name}' but is '${CPACK_PACKAGE_FILE_NAME}'")
    ENDIF()

    STRING(FIND "${CPACK_PACKAGE_FILE_NAME}" "v${expected_version}" version_found)
    IF(version_found EQUAL -1)
        MESSAGE(FATAL_ERROR "CPACK_PACKAGE_FILE_NAME should contain version 'v${expected_version}' but is '${CPACK_PACKAGE_FILE_NAME}'")
    ENDIF()
ENDMACRO()

##
# Verify that CPACK_OUTPUT_CONFIG_FILE is set correctly for multiconfig builds.
#
# Checks that CMDEF_PACKAGE set the CPACK_OUTPUT_CONFIG_FILE variable
# for multiconfig builds (CMAKE_BUILD_TYPE not set).
#
# <macro>()
#
MACRO(TEST_PACKAGE_CPACK_OUTPUT_CONFIG_FILE)
    IF(NOT DEFINED CPACK_OUTPUT_CONFIG_FILE)
        MESSAGE(FATAL_ERROR "CPACK_OUTPUT_CONFIG_FILE should be set by CMDEF_PACKAGE for multiconfig builds")
    ENDIF()

    STRING(FIND "${CPACK_OUTPUT_CONFIG_FILE}" "CMDEFCPackConfig.cmake" config_found)
    IF(config_found EQUAL -1)
        MESSAGE(FATAL_ERROR "CPACK_OUTPUT_CONFIG_FILE should contain 'CMDEFCPackConfig.cmake' but is '${CPACK_OUTPUT_CONFIG_FILE}'")
    ENDIF()
ENDMACRO()

##
# Perform comprehensive package validation checks for single-config builds.
#
# Consolidates the complete test pattern used across all test cases.
# Verifies config file creation, version file creation, config file content,
# version content, absence of custom target, and CPACK variables for single-config builds.
#
# <macro>(
#     <target_name>  // Target name for file naming and CPACK validation
#     <version>      // Expected version string
# )
#
MACRO(TEST_PACKAGE_EXTENDED_CHECKS target_name version)
    TEST_PACKAGE_CONFIG_FILE_EXISTS("${target_name}")
    TEST_PACKAGE_VERSION_FILE_EXISTS("${target_name}")
    TEST_PACKAGE_CONFIG_FILE_CONTAINS("${target_name}" "@PACKAGE_INIT@")
    TEST_PACKAGE_VERSION_FILE_CONTAINS("${target_name}" "${version}")
    TEST_PACKAGE_CUSTOM_TARGET_NOT_EXISTS()
    TEST_PACKAGE_CPACK_PACKAGE_VERSION("${version}")
    TEST_PACKAGE_CPACK_PACKAGE_FILE_NAME("${target_name}" "${version}")
ENDMACRO()
